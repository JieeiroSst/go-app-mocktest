// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/article.go

// Package integration_test is a generated GoMock package.
package integration_test

import (
	reflect "reflect"

	domain "github.com/JIeeiroSst/test/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ArticleAll mocks base method.
func (m *MockRepository) ArticleAll() ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleAll")
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleAll indicates an expected call of ArticleAll.
func (mr *MockRepositoryMockRecorder) ArticleAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleAll", reflect.TypeOf((*MockRepository)(nil).ArticleAll))
}

// ArticleById mocks base method.
func (m *MockRepository) ArticleById(arg0 int) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleById", arg0)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleById indicates an expected call of ArticleById.
func (mr *MockRepositoryMockRecorder) ArticleById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleById", reflect.TypeOf((*MockRepository)(nil).ArticleById), arg0)
}

// AuthorAll mocks base method.
func (m *MockRepository) AuthorAll() ([]domain.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorAll")
	ret0, _ := ret[0].([]domain.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorAll indicates an expected call of AuthorAll.
func (mr *MockRepositoryMockRecorder) AuthorAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorAll", reflect.TypeOf((*MockRepository)(nil).AuthorAll))
}

// AuthorById mocks base method.
func (m *MockRepository) AuthorById(arg0 int) (domain.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorById", arg0)
	ret0, _ := ret[0].(domain.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorById indicates an expected call of AuthorById.
func (mr *MockRepositoryMockRecorder) AuthorById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorById", reflect.TypeOf((*MockRepository)(nil).AuthorById), arg0)
}

// CreateArticle mocks base method.
func (m *MockRepository) CreateArticle(arg0 domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockRepositoryMockRecorder) CreateArticle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockRepository)(nil).CreateArticle), arg0)
}

// CreateAuthor mocks base method.
func (m *MockRepository) CreateAuthor(arg0 domain.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockRepositoryMockRecorder) CreateAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockRepository)(nil).CreateAuthor), arg0)
}

// DeleteArticle mocks base method.
func (m *MockRepository) DeleteArticle(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockRepositoryMockRecorder) DeleteArticle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockRepository)(nil).DeleteArticle), arg0)
}

// DeleteAuthor mocks base method.
func (m *MockRepository) DeleteAuthor(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockRepositoryMockRecorder) DeleteAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockRepository)(nil).DeleteAuthor), arg0)
}

// UpdateArticle mocks base method.
func (m *MockRepository) UpdateArticle(arg0 int, arg1 domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockRepositoryMockRecorder) UpdateArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockRepository)(nil).UpdateArticle), arg0, arg1)
}

// UpdateAuthor mocks base method.
func (m *MockRepository) UpdateAuthor(arg0 int, arg1 domain.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockRepositoryMockRecorder) UpdateAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockRepository)(nil).UpdateAuthor), arg0, arg1)
}
